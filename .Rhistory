submit()
titanic_2 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(Age, rm.na = TRUE)
reset()
reset()
submit()
titanic_2 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
titanic_2 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age))
titanic_2 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age))
titanic_2 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age))
submit()
submit()
submit()
submit()
nxt()
swirl()
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,15,50,130),
include.lowest = TRUE,
lables = c("Under 15", "15 to 50", "Over 50")))
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,14.9,50,130),
include.lowest = TRUE,
lables = c("Under 15", "15 to 50", "Over 50"))) %>%
group_by(Pclass, agecat, SEX)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,14.9,50,130),
include.lowest = TRUE,
lables = c("Under 15", "15 to 50", "Over 50"))) %>%
group_by(Pclass, agecat, Sex)
titanic_3
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,14.9,50,130),
include.lowest = TRUE,
lables = c("Under 15", "15 to 50", "Over 50")))
titanic_3
head(titanic_3)
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,14.99,50,130),
include.lowest = TRUE,
lables = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,14.99,50,130),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
submit()
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,14.99,50,130),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
submit()
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c (0,14.99,50,130),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c(0,14.99,50,130),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c(0,14.99,50,150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks =c(0,14.99,50,150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
submit()
submit()
submit()
help()
help(cut)
submit()
help(cut)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50")))
submit()
info()
skip()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(),
survivors = sum(Survived ==1),
perc_survived = 100 *survivors /N)
submit()
submit()
submit()
skip()
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(),
survivors = sum(Survived == 1),
perc_survived = 100 * survivors / N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(),
survivors = sum(Survived ==1),
perc_survived = 100 *survivors /N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(),
survivors = sum(Survived ==1),
perc_survived = 100 *survivors /N)
submit()
skip()
skip()
1
skip()
skip()
bye()
swirl()
skip()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50", "Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(),
survivors = sum(Survived == 1),
perc_survived = 100 * survivors / N)
titanic_4
##   1    15 to 50    male    72        32        44.444444
##   1    Over 50   female    13        13       100.000000
##   1    Over 50     male    26         5        19.230769
#
# I have already loaded the `titanic` data frame for you, so you
# can explore it and test out your code in the console.
#
# When you are ready submit your answer, save the script and type
# submit(), or type reset() to reset the script to its original bye()
# state.
submit()
##   1    15 to 50    male    72        32        44.444444
##   1    Over 50   female    13        13       100.000000
##   1    Over 50     male    26         5        19.230769
#
# I have already loaded the `titanic` data frame for you, so you
# can explore it and test out your code in the console.
#
# When you are ready submit your answer, save the script and type
# submit(), or type reset() to reset the script to its original bye()
# state.
skip()
skip()
swirl()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex)
head(titanic_4)
submit()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n())
submit()
skip()
mini
skip()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex)
summarize(N = n(),
survivors = sum(Survived == 1),
perc_survived = 100 * survivors / N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex)
summarize(N = n(),
survivors = sum(Survived == 1),
perc_survived = 100 * survivors / N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex)
summarize(N = n(),
survivors = sum(Survived == 1),
perc_survived = 100 * survivors / N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex)
summarize(N = n(),
survivors = sum(Survived == 1),
perc_survived = 100 * survivors / N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex)
summarize(N = n(),
survivors = sum(Survived == 1),
perc_survived = 100 * survivors / N)
submit()
skip()
swirl()
library(swirl)
swirl()
skip()
install.packages(c("dplyr","tidyr","swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
install.packages(c("dplyr", "tidyr", "swirl"))
?uninstall
??uninstall
uninstall("swirl")
swirl()
install.packages("swirl")
package_version("swirl")
packageVersion("swirl")
install_course("The R Programming Enviroment")
library(swirl)
install_course("The R Programming Enviroment")
swirl::install_course("The R Programming Environment")
swirl::install_course("R Programming")
setwd("D:/Father/R/R_Programming/W3/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse_x <- NULL
set <- function(y){
x <<- y
inverse_x <<- NULL
}
get <- function()x
setinverse <- function(inverse)inverse_x <<- inverse
setinverse <- function()inverse_x
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse_x <- x$getinverse()
if(!is.null(inverse_x)){
message("Getting cache data.")
return(inverse_x)
}
data <- x$get()
inverse_x <- solve(data)
x$setinverse(inverse_x)
inverse_x
## Return a matrix that is the inverse of 'x'
}
a <- as.matrix(1:12)
a
?as.matrix
a <- as.matrix(1:12, nrow = 3)
a
a <- matrix(1:12, nrow = 3)
a
makeCacheMatrix(a)
makeCacheMatrix(a)
cacheSolve <- function(x, ...) {
inverse_x <- x$getinverse()
if(!is.null(inverse_x)){
message("Getting cache data.")
return(inverse_x)
}
data <- x$get()
inverse_x <- solve(data)
x$setinverse(inverse_x)
inverse_x
## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse_x <- NULL
set <- function(y){
x <<- y
inverse_x <<- NULL
}
get <- function()x
setinverse <- function(inverse)inverse_x <<- inverse
getinverse <- function()inverse_x
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse_x <- x$getinverse()
if(!is.null(inverse_x)){
message("Getting cache data.")
return(inverse_x)
}
data <- x$get()
inverse_x <- solve(data)
x$setinverse(inverse_x)
inverse_x
## Return a matrix that is the inverse of 'x'
}
4
makeCacheMatrix(a)
makeCacheMatrix(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse_x <- NULL
set <- function(y){
x <<- y
inverse_x <<- NULL
}
get <- function()x
setinverse <- function(inverse)inverse_x <<- inverse
getinverse <- function()inverse_x
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inverse_x <- x$getinverse()
if(!is.null(inverse_x)){
message("Getting cache data.")
return(inverse_x)
}
data <- x$get()
inverse_x <- solve(data,...)
x$setinverse(inverse_x)
return(inverse_x)
## Return a matrix that is the inverse of 'x'
}
a
makeCacheMatrix(a)
makeCacheMatrix(a,..)
makeCacheMatrix(a,...)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
x_inv <- NULL
set <- function(y){
x <<- y
x_inv <<- NULL
}
get <- function()x
setinverse <- function(inverse) x_inv <<- inverse
getinverse <- function() x_inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
x_inv <- x$getinverse()
if(!is.null(x_inv)){
message("Getting cache data.")
return(x_inv)
}
data <- x$get()
x_inv <- solve(data,...)
x$setinverse(x_inv)
return(x_inv)
## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Create a matrix  object
makeCacheMatrix <- function(x = matrix()) {
x_inv <- NULL
set <- function(y){
x <<- y
x_inv <<- NULL
}
get <- function()x
setinverse <- function(inverse) x_inv <<- inverse
getinverse <- function() x_inv
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## computation of matrix inverse,
##if the it has been already calculated returb by makeCache Matrix
cacheSolve <- function(x, ...) {
x_inv <- x$getinverse()
if(!is.null(x_inv)){
message("Getting cache data.")
return(x_inv)
}
data <- x$get()
x_inv <- solve(data,...)
x$setinverse(x_inv)
return(x_inv)
## Return a matrix that is the inverse of 'x'
}
